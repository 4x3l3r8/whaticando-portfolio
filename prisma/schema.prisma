// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts       Account[]
    sessions       Session[]
    profile        Profile?
    projects       Project[]
    blogPosts      BlogPost[]
    WorkExperience WorkExperience[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
    id             String   @id @default(cuid())
    userId         String   @unique
    bio            String?
    location       String?
    website        String?
    githubUsername String?
    githubToken    String? // For storing the GitHub Personal Access Token
    skills         String[]
    education      Json?
    experience     Json?
    certifications Json?
    projects       Json? // For manually input projects or those not on GitHub

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
    id           String    @id @default(cuid())
    title        String
    description  String
    imageUrl     String?
    projectUrl   String?
    githubUrl    String?
    technologies String[]
    startDate    DateTime
    endDate      DateTime?
    userId       String
    published    Boolean   @default(false)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
    id        String   @id @default(cuid())
    title     String
    content   String
    published Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkExperience {
    id          String    @id @default(cuid())
    title       String
    company     String
    location    String?
    startDate   DateTime
    endDate     DateTime?
    userId      String
    published   Boolean   @default(false)
    description String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactFormSubmission {
    id      String @id @default(cuid())
    name    String
    email   String
    message String
}
